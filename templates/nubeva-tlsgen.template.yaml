AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys TLSGen Client as part of the Nubeva TLS Decrypt & Open Source Tools
Parameters:
  APIKey:
    Description: "The Token for your Prisms account"
    Type: String
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: Select the VPC to install into.
  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access the instances. We recommend
      that you set this value to a trusted IP range.
    Type: String
  PrivateSubnet1ID:
    Description: Subnet Id for Private Subnet1
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Description: Subnet Id for Private Subnet2
    Type: AWS::EC2::Subnet::Id
  NumberOfClients:
    Description: 'The number of EC2 instances'
    Type: Number
    Default: 2
  ClientInstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - VPCID
          - RemoteAccessCIDR
      - Label:
          default: "Autoscaling Configuration"
        Parameters:
          - KeyPairName
          - ClientInstanceType
          - NumberOfClients

Mappings:
  AWSAMIRegionMap:
    AMI:
      awslinux2: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    ap-northeast-1:
      awslinux2: "ami-0c3fd0f5d33134a76"
    ap-northeast-2:
      awslinux2: "ami-095ca789e0549777d"
    ap-south-1:
      awslinux2: "ami-0d2692b6acea72ee6"
    ap-southeast-1:
      awslinux2: "ami-01f7527546b557442"
    ap-southeast-2:
      awslinux2: "ami-0dc96254d5535925f"
    eu-central-1:
      awslinux2: "ami-0cc293023f983ed53"
    eu-north-1:
      awslinux2: "ami-3f36be41"
    eu-west-1:
      awslinux2: "ami-0bbc25e23a7640b9b"
    eu-west-2:
      awslinux2: "ami-0d8e27447ec2c8410"
    eu-west-3:
      awslinux2: "ami-0adcddd3324248c4c"
    us-east-1:
      awslinux2: "ami-0b898040803850657"
    us-east-2:
      awslinux2: "ami-0d8f6eb4f641ef691"
    us-west-1:
      awslinux2: "ami-056ee704806822732"
    us-west-2:
      awslinux2: "ami-082b5a644766e0e6f"
    ca-central-1:
      awslinux2: "ami-0d4ae09ec9361d8ac"
    sa-east-1:
      awslinux2: "ami-058943e7d9b9cabfb"

Resources:
  ClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Client Security Group
      VpcId: !Ref 'VPCID'
  ClientSecurityGroupSSHinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref "ClientSecurityGroup"
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref "RemoteAccessCIDR"
  ClientSecurityGroupOutbound:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref "ClientSecurityGroup"
      CidrIp: 0.0.0.0/0
      IpProtocol: "-1"
      FromPort: -1
      ToPort: -1

  ClientInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
      - !Ref ClientIAMRole

  ClientIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: asg
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'autoscaling:DescribeAutoScalingGroups'
            - 'autoscaling:DescribeAutoScalingInstances'
            - 'ec2:DescribeInstances'
            Resource:
            - '*'

  ClientAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - !Ref PrivateSubnet1ID
      - !Ref PrivateSubnet2ID
      LaunchConfigurationName: !Ref ClientLaunchConfiguration
      MinSize: '2'
      MaxSize: !Ref 'NumberOfClients'
      DesiredCapacity: !Ref 'NumberOfClients'
      MetricsCollection:
      - Granularity: 1Minute
        Metrics:
        - GroupInServiceInstances
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref 'NumberOfClients'
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !Ref 'NumberOfClients'
        MaxBatchSize: 1
        PauseTime: PT10M
        SuspendProcesses:
        - AlarmNotification
        WaitOnResourceSignals: true

  ClientLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Configure:
            - "ConfigStartup"
          Install:
            - "InstallServices"
            - "InstallNubevaAgent"
          Start:
            - "StartTLSGenerator"
        ConfigStartup:
          commands:
            01_addintrclocal:
              command: "echo 'yum update -y' >> /etc/rc.local"
            02_chmod:
              command: "chmod +x /etc/rc.d/rc.local"
        InstallServices:
          packages:
            yum:
              wget: []
              docker: []
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
        InstallNubevaAgent:
          commands:
            01_download_and_install:
              command:
                !Sub |
                  docker run -v /:/host -v /var/run/docker.sock:/var/run/docker.sock --cap-add NET_ADMIN --cap-add SYS_ADMIN --cap-add SYS_RESOURCE --cap-add SYS_PTRACE --name nubeva-agent -d --restart=always --net=host nubeva/nuagent --accept-eula --nutoken ${APIKey}
        StartTLSGenerator:
          commands:
            # Does cron come installed with AWS Linux?
            01_pulltlsgenimage:
              command: "docker pull nubevalab/tlsgenerator:latest"
            02_createcronjob:
              command: "(crontab -l ; echo \"* * * * * docker run nubevalab/tlsgenerator:latest\") | crontab -"
            #01_createDirectory:
            #  command: "mkdir /opt/nubevaTools"
            #01_installscript:
            #  command: "wget -nv https://raw.githubusercontent.com/nubevalabs/NubevaTools/master/awsGenerateTLS.sh -O /opt/nubevaTools/awsGenerateTLS.sh"
            #03_allowExecute:
            #  command: "chmod +x /opt/nubevaTools/awsGenerateTLS.sh"
            #04_startTLSgen:
            #  command: "/opt/nubevaTools/awsGenerateTLS.sh > dev/null 2>&1 &"
            #05_addintrclocal:
            #  command: "echo '/opt/nubevaTools/awsGenerateTLS.sh > dev/null 2>&1 &' >> /etc/rc.local"
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          amazon-linux-extras install epel -y
          yum update -y
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ClientLaunchConfiguration --configsets Configure,Install,Start
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ClientAutoScalingGroup
      InstanceType: !Ref ClientInstanceType
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - awslinux2
      SecurityGroups:
      - !Ref "ClientSecurityGroup"
      IamInstanceProfile: !Ref ClientInstanceProfile
      KeyName:
        Ref: KeyPairName
      AssociatePublicIpAddress: false
